# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: service.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='service.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\rservice.proto\"\x1f\n\x0fStandardRequest\x12\x0c\n\x04name\x18\x01 \x01(\t\" \n\rStandardReply\x12\x0f\n\x07message\x18\x01 \x01(\t\",\n\rStreamRequest\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\r\n\x05\x63ount\x18\x02 \x01(\x05\"-\n\x0bStreamReply\x12\x0f\n\x07message\x18\x01 \x01(\t\x12\r\n\x05\x63ount\x18\x02 \x01(\x05\x32\x8d\x03\n\x0bTestService\x12\x32\n\x0cNormalMethod\x12\x10.StandardRequest\x1a\x0e.StandardReply\"\x00\x12\x32\n\x0cStreamMethod\x12\x0e.StreamRequest\x1a\x0e.StandardReply\"\x00\x30\x01\x12\x37\n\x11StreamInputMethod\x12\x10.StandardRequest\x1a\x0c.StreamReply\"\x00(\x01\x12<\n\x12StreamStreamMethod\x12\x10.StandardRequest\x1a\x0e.StandardReply\"\x00(\x01\x30\x01\x12\x33\n\rDelayedMethod\x12\x10.StandardRequest\x1a\x0e.StandardReply\"\x00\x12\x35\n\x0f\x45xceptionMethod\x12\x10.StandardRequest\x1a\x0e.StandardReply\"\x00\x12\x33\n\rDelayedStream\x12\x0e.StreamRequest\x1a\x0e.StandardReply\"\x00\x30\x01\x62\x06proto3')
)




_STANDARDREQUEST = _descriptor.Descriptor(
  name='StandardRequest',
  full_name='StandardRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='StandardRequest.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=17,
  serialized_end=48,
)


_STANDARDREPLY = _descriptor.Descriptor(
  name='StandardReply',
  full_name='StandardReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='message', full_name='StandardReply.message', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=50,
  serialized_end=82,
)


_STREAMREQUEST = _descriptor.Descriptor(
  name='StreamRequest',
  full_name='StreamRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='StreamRequest.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='count', full_name='StreamRequest.count', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=84,
  serialized_end=128,
)


_STREAMREPLY = _descriptor.Descriptor(
  name='StreamReply',
  full_name='StreamReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='message', full_name='StreamReply.message', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='count', full_name='StreamReply.count', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=130,
  serialized_end=175,
)

DESCRIPTOR.message_types_by_name['StandardRequest'] = _STANDARDREQUEST
DESCRIPTOR.message_types_by_name['StandardReply'] = _STANDARDREPLY
DESCRIPTOR.message_types_by_name['StreamRequest'] = _STREAMREQUEST
DESCRIPTOR.message_types_by_name['StreamReply'] = _STREAMREPLY
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

StandardRequest = _reflection.GeneratedProtocolMessageType('StandardRequest', (_message.Message,), dict(
  DESCRIPTOR = _STANDARDREQUEST,
  __module__ = 'service_pb2'
  # @@protoc_insertion_point(class_scope:StandardRequest)
  ))
_sym_db.RegisterMessage(StandardRequest)

StandardReply = _reflection.GeneratedProtocolMessageType('StandardReply', (_message.Message,), dict(
  DESCRIPTOR = _STANDARDREPLY,
  __module__ = 'service_pb2'
  # @@protoc_insertion_point(class_scope:StandardReply)
  ))
_sym_db.RegisterMessage(StandardReply)

StreamRequest = _reflection.GeneratedProtocolMessageType('StreamRequest', (_message.Message,), dict(
  DESCRIPTOR = _STREAMREQUEST,
  __module__ = 'service_pb2'
  # @@protoc_insertion_point(class_scope:StreamRequest)
  ))
_sym_db.RegisterMessage(StreamRequest)

StreamReply = _reflection.GeneratedProtocolMessageType('StreamReply', (_message.Message,), dict(
  DESCRIPTOR = _STREAMREPLY,
  __module__ = 'service_pb2'
  # @@protoc_insertion_point(class_scope:StreamReply)
  ))
_sym_db.RegisterMessage(StreamReply)


try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class TestServiceStub(object):
    """Test service
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.NormalMethod = channel.unary_unary(
          '/TestService/NormalMethod',
          request_serializer=StandardRequest.SerializeToString,
          response_deserializer=StandardReply.FromString,
          )
      self.StreamMethod = channel.unary_stream(
          '/TestService/StreamMethod',
          request_serializer=StreamRequest.SerializeToString,
          response_deserializer=StandardReply.FromString,
          )
      self.StreamInputMethod = channel.stream_unary(
          '/TestService/StreamInputMethod',
          request_serializer=StandardRequest.SerializeToString,
          response_deserializer=StreamReply.FromString,
          )
      self.StreamStreamMethod = channel.stream_stream(
          '/TestService/StreamStreamMethod',
          request_serializer=StandardRequest.SerializeToString,
          response_deserializer=StandardReply.FromString,
          )
      self.DelayedMethod = channel.unary_unary(
          '/TestService/DelayedMethod',
          request_serializer=StandardRequest.SerializeToString,
          response_deserializer=StandardReply.FromString,
          )
      self.ExceptionMethod = channel.unary_unary(
          '/TestService/ExceptionMethod',
          request_serializer=StandardRequest.SerializeToString,
          response_deserializer=StandardReply.FromString,
          )
      self.DelayedStream = channel.unary_stream(
          '/TestService/DelayedStream',
          request_serializer=StreamRequest.SerializeToString,
          response_deserializer=StandardReply.FromString,
          )


  class TestServiceServicer(object):
    """Test service
    """

    def NormalMethod(self, request, context):
      """UnaryUnary
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def StreamMethod(self, request, context):
      """UnaryStream
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def StreamInputMethod(self, request_iterator, context):
      """StreamUnary
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def StreamStreamMethod(self, request_iterator, context):
      """StreamStream
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def DelayedMethod(self, request, context):
      """Delayed
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ExceptionMethod(self, request, context):
      """Exception
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def DelayedStream(self, request, context):
      """Delayed Stream
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_TestServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'NormalMethod': grpc.unary_unary_rpc_method_handler(
            servicer.NormalMethod,
            request_deserializer=StandardRequest.FromString,
            response_serializer=StandardReply.SerializeToString,
        ),
        'StreamMethod': grpc.unary_stream_rpc_method_handler(
            servicer.StreamMethod,
            request_deserializer=StreamRequest.FromString,
            response_serializer=StandardReply.SerializeToString,
        ),
        'StreamInputMethod': grpc.stream_unary_rpc_method_handler(
            servicer.StreamInputMethod,
            request_deserializer=StandardRequest.FromString,
            response_serializer=StreamReply.SerializeToString,
        ),
        'StreamStreamMethod': grpc.stream_stream_rpc_method_handler(
            servicer.StreamStreamMethod,
            request_deserializer=StandardRequest.FromString,
            response_serializer=StandardReply.SerializeToString,
        ),
        'DelayedMethod': grpc.unary_unary_rpc_method_handler(
            servicer.DelayedMethod,
            request_deserializer=StandardRequest.FromString,
            response_serializer=StandardReply.SerializeToString,
        ),
        'ExceptionMethod': grpc.unary_unary_rpc_method_handler(
            servicer.ExceptionMethod,
            request_deserializer=StandardRequest.FromString,
            response_serializer=StandardReply.SerializeToString,
        ),
        'DelayedStream': grpc.unary_stream_rpc_method_handler(
            servicer.DelayedStream,
            request_deserializer=StreamRequest.FromString,
            response_serializer=StandardReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'TestService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaTestServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Test service
    """
    def NormalMethod(self, request, context):
      """UnaryUnary
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def StreamMethod(self, request, context):
      """UnaryStream
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def StreamInputMethod(self, request_iterator, context):
      """StreamUnary
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def StreamStreamMethod(self, request_iterator, context):
      """StreamStream
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def DelayedMethod(self, request, context):
      """Delayed
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ExceptionMethod(self, request, context):
      """Exception
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def DelayedStream(self, request, context):
      """Delayed Stream
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaTestServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Test service
    """
    def NormalMethod(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """UnaryUnary
      """
      raise NotImplementedError()
    NormalMethod.future = None
    def StreamMethod(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """UnaryStream
      """
      raise NotImplementedError()
    def StreamInputMethod(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
      """StreamUnary
      """
      raise NotImplementedError()
    StreamInputMethod.future = None
    def StreamStreamMethod(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
      """StreamStream
      """
      raise NotImplementedError()
    def DelayedMethod(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Delayed
      """
      raise NotImplementedError()
    DelayedMethod.future = None
    def ExceptionMethod(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Exception
      """
      raise NotImplementedError()
    ExceptionMethod.future = None
    def DelayedStream(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Delayed Stream
      """
      raise NotImplementedError()


  def beta_create_TestService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('TestService', 'DelayedMethod'): StandardRequest.FromString,
      ('TestService', 'DelayedStream'): StreamRequest.FromString,
      ('TestService', 'ExceptionMethod'): StandardRequest.FromString,
      ('TestService', 'NormalMethod'): StandardRequest.FromString,
      ('TestService', 'StreamInputMethod'): StandardRequest.FromString,
      ('TestService', 'StreamMethod'): StreamRequest.FromString,
      ('TestService', 'StreamStreamMethod'): StandardRequest.FromString,
    }
    response_serializers = {
      ('TestService', 'DelayedMethod'): StandardReply.SerializeToString,
      ('TestService', 'DelayedStream'): StandardReply.SerializeToString,
      ('TestService', 'ExceptionMethod'): StandardReply.SerializeToString,
      ('TestService', 'NormalMethod'): StandardReply.SerializeToString,
      ('TestService', 'StreamInputMethod'): StreamReply.SerializeToString,
      ('TestService', 'StreamMethod'): StandardReply.SerializeToString,
      ('TestService', 'StreamStreamMethod'): StandardReply.SerializeToString,
    }
    method_implementations = {
      ('TestService', 'DelayedMethod'): face_utilities.unary_unary_inline(servicer.DelayedMethod),
      ('TestService', 'DelayedStream'): face_utilities.unary_stream_inline(servicer.DelayedStream),
      ('TestService', 'ExceptionMethod'): face_utilities.unary_unary_inline(servicer.ExceptionMethod),
      ('TestService', 'NormalMethod'): face_utilities.unary_unary_inline(servicer.NormalMethod),
      ('TestService', 'StreamInputMethod'): face_utilities.stream_unary_inline(servicer.StreamInputMethod),
      ('TestService', 'StreamMethod'): face_utilities.unary_stream_inline(servicer.StreamMethod),
      ('TestService', 'StreamStreamMethod'): face_utilities.stream_stream_inline(servicer.StreamStreamMethod),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_TestService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('TestService', 'DelayedMethod'): StandardRequest.SerializeToString,
      ('TestService', 'DelayedStream'): StreamRequest.SerializeToString,
      ('TestService', 'ExceptionMethod'): StandardRequest.SerializeToString,
      ('TestService', 'NormalMethod'): StandardRequest.SerializeToString,
      ('TestService', 'StreamInputMethod'): StandardRequest.SerializeToString,
      ('TestService', 'StreamMethod'): StreamRequest.SerializeToString,
      ('TestService', 'StreamStreamMethod'): StandardRequest.SerializeToString,
    }
    response_deserializers = {
      ('TestService', 'DelayedMethod'): StandardReply.FromString,
      ('TestService', 'DelayedStream'): StandardReply.FromString,
      ('TestService', 'ExceptionMethod'): StandardReply.FromString,
      ('TestService', 'NormalMethod'): StandardReply.FromString,
      ('TestService', 'StreamInputMethod'): StreamReply.FromString,
      ('TestService', 'StreamMethod'): StandardReply.FromString,
      ('TestService', 'StreamStreamMethod'): StandardReply.FromString,
    }
    cardinalities = {
      'DelayedMethod': cardinality.Cardinality.UNARY_UNARY,
      'DelayedStream': cardinality.Cardinality.UNARY_STREAM,
      'ExceptionMethod': cardinality.Cardinality.UNARY_UNARY,
      'NormalMethod': cardinality.Cardinality.UNARY_UNARY,
      'StreamInputMethod': cardinality.Cardinality.STREAM_UNARY,
      'StreamMethod': cardinality.Cardinality.UNARY_STREAM,
      'StreamStreamMethod': cardinality.Cardinality.STREAM_STREAM,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'TestService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
